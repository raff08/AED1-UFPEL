#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

typedef struct NO* arvAVL;

struct NO {
    int dado;
    int alt;
    struct NO *esq;
    struct NO *dir;
};


criar_arvore(){
    arvAVL *raiz = (arvAVL*)malloc(sizeof(arvAVL));
    if (raiz != NULL){
        *raiz = NULL;
        return raiz;
    }
}

void preordem(arvAVL *raiz){
    if (raiz == NULL) {
        return 0;
    }

    printf ("\n%d",(*raiz)->dado);
    preordem(&((*raiz)->esq));
    preordem(&((*raiz)->dir));
}

void emordem(arvAVL *raiz){
    if (raiz == NULL){
        return 0;
    }

    emordem(&((*raiz)->esq));
    printf("%d\n", (*raiz)->dado);
    emordem(&((*raiz)->dir));
}

busca_arvore(arvAVL *raiz, int valor){
    if (raiz == NULL) {
        printf("arvore n existe");
        return 0;
    }

    struct NO* atual = *raiz;

    if (valor == atual->dado) {
        printf ("valor encontrado %d\n", atual->dado);
        return 1;
    }

    if (valor > atual->dado) {
        atual = atual->dir;
    } else {
        atual = atual->esq;
    }
    return 0;
}


// calcula a altura do nó

int alt_NO(struct NO* no){
    if (no == NULL){
        return -1;
    } else {
        return no->alt;
    }
}

//caclula o FB
int calculaFB(struct NO* no){
    return labs(alt_NO(no->esq) - alt_NO(no->dir));
}

//calcula maior valor
int maior(int x, int y){
    if (x > y) {
        return x;
    } else {
        return y;
    }
}

/* ROTAÇÕES */

void rotacaoLL(arvAVL *raiz){
    struct NO *no;

    no = (*raiz)->esq;
    (*raiz)->esq = no->dir;
    no->dir = *raiz;
    
    (*raiz)->alt = maior(alt_NO((*raiz)->esq), alt_NO((*raiz)->dir)) +1;
    no->alt = maior(alt_NO (no->esq), (*raiz)->alt) +1;
    
    *raiz = no;
}

void rotacaoRR(arvAVL *raiz){
    struct NO *no;

    no = (*raiz)->dir;
    (*raiz)->dir = no->esq;
    no->esq = *raiz;

    (*raiz)->alt = maior(alt_NO((*raiz)->esq), alt_NO((*raiz)->dir)) +1;
    no->alt = maior(alt_NO(no->dir), (*raiz)->alt) +1;

    (*raiz) = no;
}

void rotacaoLR(arvAVL *raiz){
    rotacaoRR(&(*raiz)->esq);
    rotacaoLL(raiz);
}

void rotacaoRL(arvAVL *raiz){
    rotacaoLL(&(*raiz)->dir);
    rotacaoRR(raiz);
}

 /* int insere_arvAVL(arvAVL *raiz, int valor) {
    int res;
    if(*raiz == NULL) {
        struct NO *novo;
        novo = (struct NO*) malloc(sizeof(struct NO));
        if (novo == NULL) {
            printf("erro de alocacao");
            return 0;
        }

        novo->dado = valor;
        novo->alt = 0;
        novo->esq = NULL;
        novo->dir = NULL;
        *raiz = novo;
        return 1;
    }

    struct NO *atual = *raiz;
    if (valor < atual->dado) {
        if ((res = insere_arvAVL(&(atual->esq), valor)) == 1) {
            if(calculaFB(atual) >= 2){ 
                if(valor < (*raiz)->esq->dado){
                    rotacaoLL;
                } else {
                    rotacaoLR;
                }
            }
        } 
    } else {
        if (valor > atual->dado){
            if ((res = insere_arvAVL(&(atual->dir), valor)) == 1) {
                if(calculaFB(atual)>=2){
                    if((*raiz)->dir->dado > valor){
                        rotacaoRR(*raiz);
                    } else {
                        rotacaoRL;
                    }
                }
            }
        } else {
            printf("valor duplicado");
            return 0;
        }
    }

    atual->alt = maior(alt_NO(atual->esq), alt_NO(atual->dir)) + 1;
    return res;


} */


int insere_arvAVL(arvAVL *raiz, int valor){
    int res;

    if(*raiz == NULL) {
        struct NO *novo;
        novo = (struct NO*)malloc(sizeof(struct NO));
        if (novo == NULL) {
            printf ("erro de alocacao");
            return 0;
        }

        novo->dado = valor;
        novo->alt = 0;
        novo->dir = NULL;
        novo->esq = NULL;
        *raiz = novo;
        return 1;
    }

    struct NO *atual = *raiz;
    if (valor < atual->dado) {
        if((res = insere_arvAVL(&(atual->esq), valor)) == 1) {
            if (calculaFB(atual) >= 2) {
                if (valor < (*raiz)->esq->dado) {
                    rotacaoLL;
                } else {
                    rotacaoLR;
                }


            }
        }
        
    }
    
}










int main() {
    int valor;
    arvAVL *raiz = criar_arvore();
    int x = insere_arvAVL(raiz, valor);
    
    return 0;
}
